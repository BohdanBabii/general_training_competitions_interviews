1. Research the difference between the algorithms by Edmonds-Karp and Ford-Fulkerson. Give an example where the Ford-Fulkerson-algorithm might take significantly longer than Edmonds-Karp.
    Both algorithms are being used to solve the maximum flow problems in network flow graphs, the difference is how they select augmenting paths.
    
    Edmonds-Karp Algorithm uses Breadth-First Search to find augmenting paths.

    Ford-Fulkerson Algorithm uses a generic method that relies on selecting any augmenting path in each iteration.

    Example:
    A graph where all edge capacities are integers.
    There exists an augmenting path with a ver high capacity larger than the sum of capacities of all other edges.
    
        Ford-Fulkerson algorithm might repeatedly choose a specific path, causing it to take long time to converge.

        Edmonds-Karp uses BFS to quickly find the shorter path in each iteration.

2. Describe your algorithm that solves the Problem 100 ("3n+1-problem"): what algorithmic techniques did you use?
    The algorithm follows these steps:
        1. if n is 1 return 1
        2. if n is even, return n+sum(n/2)
        3. if n is odd, return n+sum(3*n+1)
        The algorithmic technique I used is recursion. My code is recursively calculating the sum of the sequence generated by applying the 3n+1 rule until n is 1.

3. Which algorithm do you use for Problem 459 ("Graph Connectivity"), and why?
    I used the depth-first search to find the connected nodes in the undirected graph. My algorithm works as follows:
        1. A unorderd_map is used to represent the graph, where each node is associated with a set of its neighbors.
        2. My code iterates through each node in the graph and performs DFS to traverse all connected nodes.
        3. The count of DFS calls is equal to the number of connected components in the graph.